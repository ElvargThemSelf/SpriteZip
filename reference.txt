extern crate brotli;

struct PrintAsDecimal {

}

impl Write for PrintAsDecimal {
    fn write(&mut self, buf: &[u8]) -> Result<usize, std::io::Error> {
        for x in buf
        {
            println!("{}", x);
        }
        Ok(buf.len())
    }

    fn flush(&mut self) -> Result<(), std::io::Error> {
        Ok(())
    }
}

impl Read for PrintAsDecimal {
    fn read(&mut self, buf: &mut [u8]) -> Result<usize, std::io::Error> {
        let size = buf.len();

        for x in buf
        {
            println!("{}", x);
        }

        Ok(size)
    }
}

struct User {
    username: String,
    count: u32,
}

impl User {
    fn printName(&self){
        println!("{}",self.username);
    }
}

fn build_user(count: u32) -> User
{
    let original_user = User {
        username: String::from("test"),
        count,
    };

    User {
        count: 42,
        ..original_user
    }
}

fn main() {
    use std::io;
    use std::io::{Write};
    let stdout = &mut io::stdout();
    let mut writer = brotli::CompressorWriter::new(
    stdout,
    4096,
    11,
22);

    let buf = [0u8; 4096];

    writer.write_all(&buf);

}
